#version 330 core
out vec4 FragColor;

in vec3 FragPos;
in vec3 Normal;
in vec2 TexCoords;
in float Height;

uniform sampler2D shadowMap1;
uniform sampler2D shadowMap2;

uniform vec3 lightDir1;
uniform vec3 lightDir2;

uniform vec3 viewPos;

uniform sampler2D diffuseTexture;

uniform mat4 lightSpaceMatrix1;
uniform mat4 lightSpaceMatrix2;

uniform bool isTerrain;

float calculateShadow(vec4 fragPosLightSpace, sampler2D shadowMap)
{
    vec3 projCoords = fragPosLightSpace.xyz / fragPosLightSpace.w;
    projCoords = projCoords * 0.5 + 0.5;

    if(projCoords.z > 1.0)
        return 0.0;

    float closestDepth = texture(shadowMap, projCoords.xy).r;
    float currentDepth = projCoords.z;
    float bias = 0.005;

    float shadow = 0.0;
    vec2 texelSize = 1.0 / textureSize(shadowMap, 0);

    // Using a rotated grid to reduce shadow aliasing
    for(int x = -3; x <= 3; ++x)
    {
        for(int y = -3; y <= 3; ++y)
        {
            vec2 offset = vec2(x, y) * texelSize + vec2(0.5) * texelSize;
            float pcfDepth = texture(shadowMap, projCoords.xy + offset).r; 
            shadow += currentDepth - bias > pcfDepth ? 1.0 : 0.0;        
        }    
    }
    shadow /= 49.0;

    return shadow;
}

void main()
{
    // Common calculations for both terrain and models
    vec3 norm = normalize(Normal);
    vec3 viewDir = normalize(viewPos - FragPos);

    // Ambient lighting
    vec3 ambient = 0.15 * texture(diffuseTexture, TexCoords).rgb;

    // Initialize lighting
    vec3 lighting = ambient;

    // Light 1 calculations
    vec3 lightDir1Norm = normalize(-lightDir1);
    float diff1 = max(dot(norm, lightDir1Norm), 0.0);
    vec3 diffuse1 = diff1 * texture(diffuseTexture, TexCoords).rgb;

    vec3 reflectDir1 = reflect(-lightDir1Norm, norm);
    float spec1 = pow(max(dot(viewDir, reflectDir1), 0.0), 64.0);
    vec3 specular1 = vec3(0.5) * spec1;

    vec4 fragPosLightSpace1 = lightSpaceMatrix1 * vec4(FragPos, 1.0);
    float shadow1 = calculateShadow(fragPosLightSpace1, shadowMap1);

    // Light 2 calculations
    vec3 lightDir2Norm = normalize(-lightDir2);
    float diff2 = max(dot(norm, lightDir2Norm), 0.0);
    vec3 diffuse2 = diff2 * texture(diffuseTexture, TexCoords).rgb;

    vec3 reflectDir2 = reflect(-lightDir2Norm, norm);
    float spec2 = pow(max(dot(viewDir, reflectDir2), 0.0), 64.0);
    vec3 specular2 = vec3(0.5) * spec2;

    vec4 fragPosLightSpace2 = lightSpaceMatrix2 * vec4(FragPos, 1.0);
    float shadow2 = calculateShadow(fragPosLightSpace2, shadowMap2);

    // Combine shadows
    float combinedShadow = max(shadow1, shadow2);

    // Combine lighting components
    vec3 lighting1 = (diffuse1 + specular1) * (1.0 - shadow1);
    vec3 lighting2 = (diffuse2 + specular2) * (1.0 - shadow2);

    lighting += lighting1 + lighting2;

    // Apply combined shadow to the final color
    vec3 finalColor = lighting * (1.0 - combinedShadow);

    FragColor = vec4(finalColor, 1.0);
}
