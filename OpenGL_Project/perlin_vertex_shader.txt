#version 330 core
layout (location = 0) in vec3 aPos;
layout (location = 1) in vec3 aNormal;
layout (location = 2) in vec2 aTexCoords; // 2D texture coordinate attribute

out vec3 Normal;
out vec3 TexCoords3D; // 3D texture coordinate
out vec3 FragPos;

uniform mat4 model;
uniform mat4 view;
uniform mat4 projection;

void main()
{
    // Pass the normals to the fragment shader
    Normal = aNormal;

    // Generate a 3D texture coordinate. Using the z-coordinate as an example for the third dimension
    TexCoords3D = vec3(aTexCoords, aPos.z);

    // Calculate the fragment position vector in world space for lighting calculations
    FragPos = vec3(model * vec4(aPos, 1.0));

    // Calculate the final position of the vertex
    gl_Position = projection * view * model * vec4(aPos, 1.0);
}
